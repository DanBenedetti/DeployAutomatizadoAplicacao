name: CI/CD Pipeline

on: push: branches: - main

jobs: build: runs-on: ubuntu-latest

services:
  db:
    image: mysql:8.0
    env:
      MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
      MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
      MYSQL_USER: ${{ secrets.MYSQL_USER }}
      MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
    ports:
      - 8087:3306
    options: &gt;-
      --health-cmd="mysqladmin ping -h localhost"
      --health-interval=30s
      --health-timeout=10s
      --health-retries=5
    volumes:
      - db_data:/var/lib/mysql

steps:
  - name: Checkout código fonte
    uses: actions/checkout@v4

  - name: Configurar QEMU (caso build multi-arquitetura)
    uses: docker/setup-qemu-action@v1

  - name: Build Docker image
    run: |
      docker build -t danilobenedetti/app_crud_flask:latest .

  - name: Logar no Docker Hub
    uses: docker/login-action@v2
    with:
      username: ${{ secrets.DOCKER_USERNAME }}
      password: ${{ secrets.DOCKER_PASSWORD }}

  - name: Push Docker image para Docker Hub
    run: |
      docker push danilobenedetti/app_crud_flask:latest

  # ==== ATIVA SSH AGENT PARA TODOS OS STEPS SSH/SCP ====
  - name: Configura chave SSH no agente
    uses: webfactory/ssh-agent@v0.9.0
    with:
      ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

  # ==== COMANDOS REMOTOS USANDO SSH ====
  - name: Subir SonarQube temporário no servidor remoto
    run: |
      ssh -o StrictHostKeyChecking=no aluno@201.23.3.86 '
        docker pull sonarqube:community &&
        docker stop sonartmp || true && docker rm sonartmp || true &&
        docker run -d --name sonartmp -p 8088:8088 sonarqube:community
      '

  - name: Esperar SonarQube inicializar
    run: |
      ssh -o StrictHostKeyChecking=no aluno@201.23.3.86 '
        echo "Aguardando SonarQube subir..."
        for i in {1..40}; do
          if curl --fail http://localhost:8088/api/system/health | grep -q '"'"Health":"GREEN"'"'; then break; fi
          sleep 8
        done
        echo "SonarQube pronto!"
      '

  - name: Instalar SonarScanner CLI
    run: |
      curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
      unzip -o sonar-scanner.zip

  - name: Rodar análise SonarScanner apontando para SonarQube remoto
    env:
      SONAR_USER: admin
      SONAR_PASS: admin
    run: |
      export PATH="$PWD/sonar-scanner-5.0.1.3006-linux/bin:$PATH"
      sonar-scanner \
        -Dsonar.projectKey=danilo_crud_flask \
        -Dsonar.sources=. \
        -Dsonar.host.url=http://201.23.3.86:8088 \
        -Dsonar.login=$SONAR_USER \
        -Dsonar.password=$SONAR_PASS

  - name: Instalar jq
    run: sudo apt-get update && sudo apt-get install -y jq

  - name: Validar Quality Gate do SonarQube remoto
    env:
      SONAR_USER: admin
      SONAR_PASS: admin
    run: |
      echo "Aguardando Quality Gate..."
      sleep 10
      for i in {1..30}; do
        QG=$(curl -u $SONAR_USER:$SONAR_PASS "http://201.23.3.86:8088/api/qualitygates/project_status?projectKey=danilo_crud_flask" | jq -r .projectStatus.status)
        echo "Quality Gate: $QG"
        if [[ "$QG" == "OK" ]]; then exit 0; fi
        if [[ "$QG" == "ERROR" ]]; then echo "Quality Gate falhou"; exit 1; fi
        sleep 6
      done
      echo "Quality Gate não retornou status OK/ERROR a tempo"
      exit 1

  - name: Parar e remover SonarQube temporário (sempre executa)
    if: always()
    run: |
      ssh -o StrictHostKeyChecking=no aluno@201.23.3.86 '
        docker stop sonartmp || true
        docker rm sonartmp || true
      '

  # ==== GARANTIR DIRETÓRIO DE DEPLOY ====
  - name: Garantir que o diretório de deploy existe
    run: |
      ssh -o StrictHostKeyChecking=no aluno@201.23.3.86 'mkdir -p /home/danilo/deploy'

  # ==== ENVIO DO ARQUIVO DOCKER-COMPOSE VIA SCP NATIVO ====
  - name: Enviar docker-compose.yml por SCP
    run: |
      scp -o StrictHostKeyChecking=no docker-compose.yml aluno@201.23.3.86:/home/danilo/deploy/

  # ==== EXECUTAR DEPLOY VIA SSH ====
  - name: Executar deploy remoto via SSH
    run: |
      ssh -o StrictHostKeyChecking=no aluno@201.23.3.86 '
        cd /home/danilo/deploy
        docker-compose down
        docker-compose pull
        docker-compose up -d --build
      '

volumes: db_data: